{
	"collectionName": "reactCheatsheet",
	"groups": [
		{
			"title": "General",
			"docs": [
				{
					"title": "What is React and how does it work?",
					"description": "React is a JavaScript library for building user interfaces using a virtual DOM."
				},
				{
					"title": "Pros and Cons of React",
					"description": "<ol> <li>Declarative: Makes it easier to reason about and manage application state, resulting in more predictable and maintainable code.</li> <li>Component-based architecture: React's component-based architecture allows for code reusability, modularity, and scalability.</li> <li>Large ecosystem: React has a large and vibrant ecosystem, with many third-party libraries and tools available to enhance its functionality.</li> <li>Virtual DOM: React's virtual DOM allows for efficient updates and rendering, resulting in improved performance and user experience.</li> <li>Strong community support: React has a large and active community, which provides helpful resources, tutorials, and support for developers.</li> </ol>"
				},
				{
					"title": "What are React components? Explain the difference between functional and class components.",
					"description": "Components are reusable building blocks in React. Class components use a class syntax, while functional components use functions."
				},
				{
					"title": "What is JSX and why is it used in React?",
					"description": "JSX is a syntax extension for JavaScript that allows React components to be written in a familiar HTML-like syntax."
				},
				{
					"title": "What are React Hooks and how do they work?",
					"description": "Hooks are functions that allow state and other React features to be used in functional components."
				},
				{
					"title": "What is the purpose of using React Router?",
					"description": "React Router is used for declarative routing and navigation in React applications."
				},
				{
					"title": "What is Redux and how does it work with React?",
					"description": "Redux is a state management library that works with React to manage global state."
				},
				{
					"title": "What are some best practices for performance optimization in React?",
					"description": "Minimizing unnecessary re-renders, using memoization, and optimizing network requests."
				},
				{
					"title": "What are some limitations of React?",
					"description": "Not ideal for server-side rendering, large applications may become difficult to manage."
				}
			]
		},
		{
			"title": "Hooks",
			"docs": [
				{
					"title": "useState",
					"code": "const [counter, setCounter] = useState(0);\n\nreturn (\n  <div>\n    <p>Counter: {counter}</p>\n    <button onClick={() => setCounter(counter + 1)}>Increment</button>\n  </div>\n);",
					"description": "Manages local state in functional components"
				},
				{
					"title": "useEffect",
					"code": "useEffect(() => {\n  // perform side effects here\n});",
					"description": "Performs side effects after rendering"
				},
				{
					"title": "useContext",
					"code": "const { user } = useContext(UserContext);\n\nreturn (\n  <div>\n    <p>User: {user.name}</p>\n  </div>\n);",
					"description": "Provides access to the context object (global state)"
				},
				{
					"title": "useReducer",
					"code": "const initialState = { count: 0 };\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n};\n\nconst [state, dispatch] = useReducer(reducer, initialState);\n\nreturn (\n  <div>\n    <p>Count: {state.count}</p>\n    <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>\n    <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>\n  </div>\n);",
					"description": "Manages complex state transitions"
				},
				{
					"title": "useCallback",
					"code": "const memoizedCallback = useCallback(\n  () => {\n    // do something\n  }, [dependencies]\n);",
					"description": "Returns a memoized version of the callback function that only changes if one of the dependencies has changed"
				},
				{
					"title": "useMemo",
					"code": "const memoizedValue = useMemo(\n  () => {\n    // calculate expensive value\n  }, [dependencies]\n);",
					"description": "Memoizes expensive functions so that you can avoid calling them on every render"
				},
				{
					"title": "useLayoutEffect",
					"code": "useLayoutEffect(() => {\n  // perform synchronous DOM mutations here\n});",
					"description": "Similar to useEffect but runs synchronously after all DOM mutations"
				},
				{
					"title": "useImperativeHandle",
					"code": "const ChildComponent = forwardRef((props, ref) => {\n  useImperativeHandle(ref, () => ({\n    // expose child component's imperative API here\n  }));\n  return <div>Child Component</div>;\n});\n\nconst ParentComponent = () => {\n  const childRef = useRef();\n  // call child component's imperative API here\n  return <ChildComponent ref={childRef} />;\n};",
					"description": "Exposes a child component's imperative API to a parent component"
				},
				{
					"title": "useDebugValue",
					"code": "useDebugValue(formattedValue)",
					"description": "Displays custom debugging information in React DevTools."
				}
			]
		},
		{
			"title": "Extra",
			"docs": [
				{
					"title": "What is prop drilling in React?",
					"description": "Passing props through multiple components to access a deeply nested child component."
				},
				{
					"title": "What is the Context API in React and how is it used?",
					"description": "A way to share data between components without having to pass props through all levels of the component tree."
				},
				{
					"title": "What is the difference between state and props in React?",
					"description": "State is used for managing internal component state, while props are used for passing data between components."
				},
				{
					"title": "What are higher-order components (HOCs) in React?",
					"description": "Functions that take a component and return a new component with additional functionality."
				},
				{
					"title": "What is the difference between a controlled and an uncontrolled component in React?",
					"description": "A controlled component has its state managed by React, while an uncontrolled component manages its own state."
				},
				{
					"title": "What is server-side rendering in React?",
					"description": "Rendering React components on the server and sending HTML to the client for faster initial load times and improved SEO."
				},
				{
					"title": "What is the difference between a class component and a functional component in React?",
					"description": "A class component uses a class syntax and has its own state, while a functional component is a simple function that receives props as input and returns JSX."
				},
				{
					"title": "What is the purpose of the shouldComponentUpdate lifecycle method in React?",
					"description": "To optimize performance by preventing unnecessary re-renders of a component."
				},
				{
					"title": "What is the significance of the key prop in React?",
					"description": "A unique identifier used by React to optimize rendering performance when working with lists of components."
				}
			]
		}
	]
}